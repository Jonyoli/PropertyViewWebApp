@page "/listings/addAmenity/{listingsId:int}"
@using PropertyViewWebApp.Shared.Models.Listings
@inject HttpClient http
@using PropertyViewWebApp.Shared.Models.Amenities
@inject NavigationManager navigation

@if (model != null)
{
    <h3>Add Amenity to Listing: @model.Id</h3>
}
@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

@if (amenities == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>Amenity</label>
            <InputSelect class="form-control" @bind-Value="model.AmenitiesId">
                @foreach (var amenity in amenities)
                    {
                    <option value="@amenity.Id">@amenity.Name</option>
                    }
            </InputSelect>
            <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>

        </EditForm>
    </div>
}


@code {
    [Parameter]
    public int listingsId { get; set; }
    private AddListingsToAmenities model { get; set; } = new();
    private IEnumerable<AmenitiesGetAll> amenities { get; set; }
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model.Id = listingsId;
        amenities = await http.GetFromJsonAsync<IEnumerable<AmenitiesGetAll>>("/api/amenities/");
    }

    private async void HandleSubmit()
    {
        var createListings = await http.PutAsJsonAsync<AddListingsToAmenities>($"/api/listings/addAmenity/{listingsId}", model);
        if (createListings.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/Listings");
        }
        else
        {
            errorMessage = "Could not update listing right now. Please try again later.";
        }
    }

}
